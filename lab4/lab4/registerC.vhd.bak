-- Name: Rodrigo Rojas
-- Contact: rrojas@clemson.edu
-- Purpose: Shifting Register

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

ENTITY registerC IS
	GENERIC(n: INTEGER := 8);
	PORT (input: IN std_logic_vector((n-1) DOWNTO 0);
			signBit: IN std_logic;
			clock: IN std_logic;
			output: OUT std_logic_vector((n-1) DOWNTO 0);
			bitsToB: OUT std_logic_vector(1 DOWNTO 0)
			);
END registerC;

ARCHITECTURE behavior_registerC OF registerC IS
BEGIN 
	--addBits: adder PORT MAP(Cin => '0', registerC => currentBits, bitPair => bitsAdd, sum => afterAddbits, Cout => Cout); -- Addition of current registerC number and bitPair number
	bitsToB <= input(1 DOWNTO 0); -- Last 2 bits after addition stored on signal
	PROCESS(clock)
		VARIABLE allBits: std_logic_vector((n-1) DOWNTO 0);
		BEGIN
			IF RISING_EDGE(clock) THEN
				FOR i IN 0 TO (n-3) LOOP
					allBits(i) := input(i+2); -- Shifts bits to the right
				END LOOP;
				allBits(n-2) := signBit; -- Stores sign bit in first two bits after addition
				allBits(n-1) := signBit; 
			END IF;
			output <= allBits; -- Outputs the final number after shifting 
		END PROCESS;
END behavior_registerC;



